package com.liu.gymmanagement.mapper;

import com.liu.gymmanagement.model.Accesslogs;
import com.liu.gymmanagement.model.AccesslogsExample;

import java.time.LocalDateTime;
import java.util.List;

import org.apache.ibatis.annotations.*;

@Mapper
public interface AccesslogsMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table accesslogs
     *
     * @mbg.generated Wed Mar 26 00:44:02 CST 2025
     */
    long countByExample(AccesslogsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table accesslogs
     *
     * @mbg.generated Wed Mar 26 00:44:02 CST 2025
     */
    int deleteByExample(AccesslogsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table accesslogs
     *
     * @mbg.generated Wed Mar 26 00:44:02 CST 2025
     */
    int deleteByPrimaryKey(Integer logid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table accesslogs
     *
     * @mbg.generated Wed Mar 26 00:44:02 CST 2025
     */
    int insert(Accesslogs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table accesslogs
     *
     * @mbg.generated Wed Mar 26 00:44:02 CST 2025
     */
    int insertSelective(Accesslogs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table accesslogs
     *
     * @mbg.generated Wed Mar 26 00:44:02 CST 2025
     */
    List<Accesslogs> selectByExample(AccesslogsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table accesslogs
     *
     * @mbg.generated Wed Mar 26 00:44:02 CST 2025
     */
    Accesslogs selectByPrimaryKey(Integer logid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table accesslogs
     *
     * @mbg.generated Wed Mar 26 00:44:02 CST 2025
     */
    int updateByExampleSelective(@Param("record") Accesslogs record, @Param("example") AccesslogsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table accesslogs
     *
     * @mbg.generated Wed Mar 26 00:44:02 CST 2025
     */
    int updateByExample(@Param("record") Accesslogs record, @Param("example") AccesslogsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table accesslogs
     *
     * @mbg.generated Wed Mar 26 00:44:02 CST 2025
     */
    int updateByPrimaryKeySelective(Accesslogs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table accesslogs
     *
     * @mbg.generated Wed Mar 26 00:44:02 CST 2025
     */
    int updateByPrimaryKey(Accesslogs record);

    // 查询最新的入场记录
    @Select("SELECT * FROM accesslogs WHERE UserID = #{userId} AND GymID = #{gymId} ORDER BY EntryTime DESC LIMIT 1")
    @Results({
            @Result(property = "userid", column = "UserID"),
            @Result(property = "gymid", column = "GymID"),
            @Result(property = "entrytime", column = "EntryTime")
    })
    Accesslogs findLatestByUserIdAndGymId(String userId, int gymId);

    // 插入新的出入记录
    @Insert("INSERT INTO accesslogs (UserID, GymID, EntryTime) VALUES (#{userId}, #{gymId}, #{entryTime})")
    @Results({
            @Result(property = "userid", column = "UserID"),
            @Result(property = "gymid", column = "GymID"),
            @Result(property = "entrytime", column = "EntryTime")
    })
    void insertAccessLog(Accesslogs accesslogs);

    // 更新出场时间
    @Insert("UPDATE accesslogs SET ExitTime = #{exitTime} WHERE UserID = #{userId} AND GymID = #{gymId} AND ExitTime IS NULL")
    @Results({
            @Result(property = "userid", column = "UserID"),
            @Result(property = "gymid", column = "GymID"),
            @Result(property = "exittime", column = "ExitTime")
    })
    void updateExitTime(String userId, int gymId, LocalDateTime exitTime);
}